import cv2
import RPi.GPIO as GPIO
import time

servo_pin = 17  # Kết nối servo với GPIO 17

GPIO.setmode(GPIO.BCM)
GPIO.setup(servo_pin, GPIO.OUT)

servo = GPIO.PWM(servo_pin, 50)  # 50Hz PWM
servo.start(0)  # Khởi động servo với duty cycle 0%

def inside(r, q):
    rx, ry, rw, rh = r
    qx, qy, qw, qh = q
    return rx > qx and ry > qy and rx + rw < qx + qw and ry + rh < qy + qh

def draw_detections(img, rects, thickness=1):
    for x, y, w, h in rects:
        pad_w, pad_h = int(0.1 * w), int(0.1 * h)
        cv2.rectangle(img, (x + pad_w, y + pad_h), (x + w - pad_w, y + h - pad_h), (255, 0, 255), 1)

def calculate_angle_from_person_position(x, y, w, h):
    # Tính toán góc quay dựa trên vị trí của người trong khung hình
    center_x = x + w // 2
    center_y = y + h // 2
    angle = -(center_x - img.shape[1] // 2) / (img.shape[1] // 2) * 90
    return angle

hog = cv2.HOGDescriptor()
hog.setSVMDetector(cv2.HOGDescriptor_getDefaultPeopleDetector())

cap = cv2.VideoCapture('image/walking.avi')
cap.set(cv2.CAP_PROP_FPS, 60)

try:
    while True:
        ret, img = cap.read()
        found, w = hog.detectMultiScale(img, winStride=(8, 8), padding=(32, 32), scale=1.05)
        found_filtered = []
        for ri, r in enumerate(found):
            for qi, q in enumerate(found):
                if ri != qi and inside(r, q):
                    break
            else:
                found_filtered.append(r)

        draw_detections(img, found)
        draw_detections(img, found_filtered, 3)
        print('%d (%d) found' % (len(found_filtered), len(found)))

        for x, y, w, h in found_filtered:
            angle = calculate_angle_from_person_position(x, y, w, h)
            duty_cycle = 2.5 + (12.5 - 2.5) * (angle / 90.0)  # Tính duty cycle từ góc quay
            servo.ChangeDutyCycle(duty_cycle)
            time.sleep(0.1)  # Chờ 0.1 giây để servo di chuyển

        cv2.imshow('img', img)
        if cv2.waitKey(1) & 0xFF == ord('q'):
            break
except KeyboardInterrupt:
    servo.stop()
    GPIO.cleanup()
    cap.release()
    cv2.destroyAllWindows()